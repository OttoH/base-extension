{"version":3,"file":"content.js","mappings":"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","sources":["webpack://workspace/./src/content.ts"],"sourcesContent":["// Content script that runs in the context of web pages\nimport { ExtractedData, ContentType } from './types';\n\nclass ContentExtractor {\n  private static instance: ContentExtractor;\n  \n  public static getInstance(): ContentExtractor {\n    if (!ContentExtractor.instance) {\n      ContentExtractor.instance = new ContentExtractor();\n    }\n    return ContentExtractor.instance;\n  }\n\n  // Listen for messages from the popup\n  constructor() {\n    this.setupMessageListener();\n    this.observePageChanges();\n  }\n\n  private setupMessageListener(): void {\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (request.action === 'extractContent') {\n        const data = this.extractPageContent();\n        sendResponse(data);\n      }\n      return true;\n    });\n  }\n\n  private observePageChanges(): void {\n    // Observer for dynamic content changes\n    const observer = new MutationObserver((mutations) => {\n      // Debounce rapid changes\n      if (this.debounceTimer) {\n        clearTimeout(this.debounceTimer);\n      }\n      this.debounceTimer = setTimeout(() => {\n        this.notifyContentChange();\n      }, 1000);\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false\n    });\n  }\n\n  private debounceTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private notifyContentChange(): void {\n    // Notify background script of content changes\n    chrome.runtime.sendMessage({\n      action: 'contentChanged',\n      url: window.location.href\n    });\n  }\n\n  public extractPageContent(): ExtractedData {\n    const data: ExtractedData = {\n      url: window.location.href,\n      title: document.title,\n      headings: this.extractHeadings(),\n      petRelatedContent: this.extractPetContent(),\n      metadata: this.extractMetadata(),\n      extractedAt: new Date().toISOString()\n    };\n\n    return data;\n  }\n\n  private extractHeadings(): Array<{level: number, text: string, id: string}> {\n    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    return Array.from(headings).map(heading => ({\n      level: parseInt(heading.tagName.substring(1)),\n      text: heading.textContent?.trim() || '',\n      id: heading.id || ''\n    }));\n  }\n\n  private extractPetContent(): Array<{\n    id: string;\n    text: string;\n    keywords: string[];\n    tagName: string;\n    className: string;\n    type: ContentType;\n  }> {\n    const petKeywords = [\n      'dog', 'cat', 'pet', 'animal', 'veterinary', 'vet', 'puppy', 'kitten',\n      'breed', 'health', 'nutrition', 'grooming', 'training', 'behavior',\n      'vaccine', 'vaccination', 'medical', 'clinic', 'hospital', 'care', \n      'wellness', 'surgery', 'treatment', 'medicine', 'diagnosis', 'therapy',\n      'emergency', 'dental', 'spay', 'neuter', 'parasite', 'flea', 'tick',\n      'heartworm', 'allergy', 'diet', 'exercise', 'adoption', 'rescue'\n    ];\n\n    const selectors = [\n      'p', 'div', 'span', 'article', 'section', 'li', 'td',\n      '[class*=\"content\"]', '[class*=\"description\"]', '[class*=\"text\"]',\n      '[class*=\"article\"]', '[class*=\"post\"]', '[class*=\"review\"]'\n    ];\n\n    const elements = document.querySelectorAll(selectors.join(', '));\n    const petContent: Array<{\n      id: string;\n      text: string;\n      keywords: string[];\n      tagName: string;\n      className: string;\n      type: ContentType;\n    }> = [];\n\n    elements.forEach((element, index) => {\n      const text = element.textContent?.toLowerCase() || '';\n      const originalText = element.textContent?.trim() || '';\n      \n      // Skip if text is too short or likely navigation/UI text\n      if (originalText.length < 30 || originalText.length > 2000) {\n        return;\n      }\n\n      const matchedKeywords = petKeywords.filter(keyword => \n        text.includes(keyword.toLowerCase())\n      );\n      \n      if (matchedKeywords.length >= 1) { // At least one pet-related keyword\n        // Calculate relevance score\n        const relevanceScore = this.calculateRelevanceScore(text, petKeywords);\n        \n        if (relevanceScore > 0.1) { // Minimum relevance threshold\n          petContent.push({\n            id: `pet-content-${index}`,\n            text: originalText,\n            keywords: matchedKeywords,\n            tagName: element.tagName.toLowerCase(),\n            className: element.className || '',\n            type: this.determineContentType(element, matchedKeywords)\n          });\n        }\n      }\n    });\n\n    // Sort by relevance and limit results\n    return petContent\n      .sort((a, b) => b.keywords.length - a.keywords.length)\n      .slice(0, 15);\n  }\n\n  private calculateRelevanceScore(text: string, keywords: string[]): number {\n    const words = text.split(/\\s+/);\n    const keywordMatches = keywords.filter(keyword => text.includes(keyword)).length;\n    return keywordMatches / words.length;\n  }\n\n  private determineContentType(element: Element, keywords: string[]): ContentType {\n    const className = element.className.toLowerCase();\n    const tagName = element.tagName.toLowerCase();\n    \n    // Check for medical/health related content\n    const medicalKeywords = ['health', 'medical', 'veterinary', 'treatment', 'diagnosis', 'surgery'];\n    if (keywords.some(k => medicalKeywords.includes(k))) {\n      return 'medical';\n    }\n    \n    // Check for product-related content\n    if (className.includes('product') || className.includes('item') || \n        tagName === 'li' && element.closest('[class*=\"product\"]')) {\n      return 'product';\n    }\n    \n    // Check for review content\n    if (className.includes('review') || className.includes('rating') ||\n        className.includes('comment') || className.includes('feedback')) {\n      return 'review';\n    }\n    \n    // Check for article content\n    if (tagName === 'article' || className.includes('article') || \n        className.includes('post') || className.includes('blog')) {\n      return 'article';\n    }\n    \n    return 'pet-related';\n  }\n\n  private extractMetadata(): Record<string, string> {\n    const metadata: Record<string, string> = {};\n    \n    // Extract meta tags\n    const metaTags = document.querySelectorAll('meta');\n    metaTags.forEach(meta => {\n      const name = meta.getAttribute('name') || \n                   meta.getAttribute('property') || \n                   meta.getAttribute('http-equiv') || '';\n      const content = meta.getAttribute('content') || '';\n      \n      if (name && content) {\n        metadata[name] = content;\n      }\n    });\n\n    // Extract structured data\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    scripts.forEach((script, index) => {\n      try {\n        const jsonData = JSON.parse(script.textContent || '');\n        metadata[`structured_data_${index}`] = JSON.stringify(jsonData);\n      } catch (e) {\n        // Ignore invalid JSON\n      }\n    });\n\n    return metadata;\n  }\n}\n\n// Initialize content extractor\nContentExtractor.getInstance();\n\nexport default ContentExtractor;\n"],"names":["ContentExtractor","getInstance","instance","constructor","debounceTimer","this","setupMessageListener","observePageChanges","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","extractPageContent","MutationObserver","mutations","clearTimeout","setTimeout","notifyContentChange","observe","document","body","childList","subtree","attributes","sendMessage","url","window","location","href","title","headings","extractHeadings","petRelatedContent","extractPetContent","metadata","extractMetadata","extractedAt","Date","toISOString","querySelectorAll","Array","from","map","heading","level","parseInt","tagName","substring","text","textContent","trim","id","petKeywords","elements","join","petContent","forEach","element","index","toLowerCase","originalText","length","matchedKeywords","filter","keyword","includes","calculateRelevanceScore","push","keywords","className","type","determineContentType","sort","a","b","slice","words","split","medicalKeywords","some","k","closest","meta","name","getAttribute","content","script","jsonData","JSON","parse","stringify","e"],"sourceRoot":""}