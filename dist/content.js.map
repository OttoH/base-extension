{"version":3,"file":"content.js","mappings":"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","sources":["webpack://workspace/webpack/bootstrap","webpack://workspace/webpack/runtime/define property getters","webpack://workspace/webpack/runtime/hasOwnProperty shorthand","webpack://workspace/webpack/runtime/make namespace object","webpack://workspace/./src/content.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Content script that runs in the context of web pages\nimport { ExtractedData, ContentType } from './types';\n\nclass ContentExtractor {\n  private static instance: ContentExtractor;\n  \n  public static getInstance(): ContentExtractor {\n    if (!ContentExtractor.instance) {\n      ContentExtractor.instance = new ContentExtractor();\n    }\n    return ContentExtractor.instance;\n  }\n\n  // Listen for messages from the popup\n  constructor() {\n    this.setupMessageListener();\n    this.observePageChanges();\n  }\n\n  private setupMessageListener(): void {\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (request.action === 'extractContent') {\n        const data = this.extractPageContent();\n        sendResponse(data);\n      }\n      return true;\n    });\n  }\n\n  private observePageChanges(): void {\n    // Observer for dynamic content changes\n    const observer = new MutationObserver((mutations) => {\n      // Debounce rapid changes\n      if (this.debounceTimer) {\n        clearTimeout(this.debounceTimer);\n      }\n      this.debounceTimer = setTimeout(() => {\n        this.notifyContentChange();\n      }, 1000);\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false\n    });\n  }\n\n  private debounceTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private notifyContentChange(): void {\n    // Notify background script of content changes\n    chrome.runtime.sendMessage({\n      action: 'contentChanged',\n      url: window.location.href\n    });\n  }\n\n  public extractPageContent(): ExtractedData {\n    const data: ExtractedData = {\n      url: window.location.href,\n      title: document.title,\n      headings: this.extractHeadings(),\n      petRelatedContent: this.extractPetContent(),\n      metadata: this.extractMetadata(),\n      extractedAt: new Date().toISOString()\n    };\n\n    return data;\n  }\n\n  private extractHeadings(): Array<{level: number, text: string, id: string}> {\n    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    return Array.from(headings).map(heading => ({\n      level: parseInt(heading.tagName.substring(1)),\n      text: heading.textContent?.trim() || '',\n      id: heading.id || ''\n    }));\n  }\n\n  private extractPetContent(): Array<{\n    id: string;\n    text: string;\n    keywords: string[];\n    tagName: string;\n    className: string;\n    type: ContentType;\n  }> {\n    const petKeywords = [\n      'dog', 'cat', 'pet', 'animal', 'veterinary', 'vet', 'puppy', 'kitten',\n      'breed', 'health', 'nutrition', 'grooming', 'training', 'behavior',\n      'vaccine', 'vaccination', 'medical', 'clinic', 'hospital', 'care', \n      'wellness', 'surgery', 'treatment', 'medicine', 'diagnosis', 'therapy',\n      'emergency', 'dental', 'spay', 'neuter', 'parasite', 'flea', 'tick',\n      'heartworm', 'allergy', 'diet', 'exercise', 'adoption', 'rescue'\n    ];\n\n    const selectors = [\n      'p', 'div', 'span', 'article', 'section', 'li', 'td',\n      '[class*=\"content\"]', '[class*=\"description\"]', '[class*=\"text\"]',\n      '[class*=\"article\"]', '[class*=\"post\"]', '[class*=\"review\"]'\n    ];\n\n    const elements = document.querySelectorAll(selectors.join(', '));\n    const petContent: Array<{\n      id: string;\n      text: string;\n      keywords: string[];\n      tagName: string;\n      className: string;\n      type: ContentType;\n    }> = [];\n\n    elements.forEach((element, index) => {\n      const text = element.textContent?.toLowerCase() || '';\n      const originalText = element.textContent?.trim() || '';\n      \n      // Skip if text is too short or likely navigation/UI text\n      if (originalText.length < 30 || originalText.length > 2000) {\n        return;\n      }\n\n      const matchedKeywords = petKeywords.filter(keyword => \n        text.includes(keyword.toLowerCase())\n      );\n      \n      if (matchedKeywords.length >= 1) { // At least one pet-related keyword\n        // Calculate relevance score\n        const relevanceScore = this.calculateRelevanceScore(text, petKeywords);\n        \n        if (relevanceScore > 0.1) { // Minimum relevance threshold\n          petContent.push({\n            id: `pet-content-${index}`,\n            text: originalText,\n            keywords: matchedKeywords,\n            tagName: element.tagName.toLowerCase(),\n            className: element.className || '',\n            type: this.determineContentType(element, matchedKeywords)\n          });\n        }\n      }\n    });\n\n    // Sort by relevance and limit results\n    return petContent\n      .sort((a, b) => b.keywords.length - a.keywords.length)\n      .slice(0, 15);\n  }\n\n  private calculateRelevanceScore(text: string, keywords: string[]): number {\n    const words = text.split(/\\s+/);\n    const keywordMatches = keywords.filter(keyword => text.includes(keyword)).length;\n    return keywordMatches / words.length;\n  }\n\n  private determineContentType(element: Element, keywords: string[]): ContentType {\n    const className = element.className.toLowerCase();\n    const tagName = element.tagName.toLowerCase();\n    \n    // Check for medical/health related content\n    const medicalKeywords = ['health', 'medical', 'veterinary', 'treatment', 'diagnosis', 'surgery'];\n    if (keywords.some(k => medicalKeywords.includes(k))) {\n      return 'medical';\n    }\n    \n    // Check for product-related content\n    if (className.includes('product') || className.includes('item') || \n        tagName === 'li' && element.closest('[class*=\"product\"]')) {\n      return 'product';\n    }\n    \n    // Check for review content\n    if (className.includes('review') || className.includes('rating') ||\n        className.includes('comment') || className.includes('feedback')) {\n      return 'review';\n    }\n    \n    // Check for article content\n    if (tagName === 'article' || className.includes('article') || \n        className.includes('post') || className.includes('blog')) {\n      return 'article';\n    }\n    \n    return 'pet-related';\n  }\n\n  private extractMetadata(): Record<string, string> {\n    const metadata: Record<string, string> = {};\n    \n    // Extract meta tags\n    const metaTags = document.querySelectorAll('meta');\n    metaTags.forEach(meta => {\n      const name = meta.getAttribute('name') || \n                   meta.getAttribute('property') || \n                   meta.getAttribute('http-equiv') || '';\n      const content = meta.getAttribute('content') || '';\n      \n      if (name && content) {\n        metadata[name] = content;\n      }\n    });\n\n    // Extract structured data\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    scripts.forEach((script, index) => {\n      try {\n        const jsonData = JSON.parse(script.textContent || '');\n        metadata[`structured_data_${index}`] = JSON.stringify(jsonData);\n      } catch (e) {\n        // Ignore invalid JSON\n      }\n    });\n\n    return metadata;\n  }\n}\n\n// Initialize content extractor\nContentExtractor.getInstance();\n\nexport default ContentExtractor;\n"],"names":[],"sourceRoot":""}