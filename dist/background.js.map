{"version":3,"file":"background.js","mappings":"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","sources":["webpack://workspace/./src/background.ts"],"sourcesContent":["// Background service worker for the extension\nimport { ExtractedData } from './types';\n\nclass BackgroundService {\n  constructor() {\n    this.setupExtensionListeners();\n    this.setupContextMenus();\n  }\n\n  private setupExtensionListeners(): void {\n    // Handle extension installation\n    chrome.runtime.onInstalled.addListener((details) => {\n      if (details.reason === 'install') {\n        this.handleFirstInstall();\n      } else if (details.reason === 'update') {\n        this.handleExtensionUpdate(details.previousVersion);\n      }\n    });\n\n    // Handle messages from content scripts and popup\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      this.handleMessage(request, sender, sendResponse);\n      return true; // Keep message channel open for async responses\n    });\n\n    // Handle tab updates\n    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      if (changeInfo.status === 'complete' && tab.url) {\n        this.handleTabComplete(tabId, tab);\n      }\n    });\n  }\n\n  private setupContextMenus(): void {\n    chrome.contextMenus.create({\n      id: 'soulvet-extract',\n      title: 'Extract pet content with SOULVET',\n      contexts: ['page', 'selection']\n    });\n\n    chrome.contextMenus.onClicked.addListener((info, tab) => {\n      if (info.menuItemId === 'soulvet-extract' && tab?.id) {\n        this.extractContentFromTab(tab.id);\n      }\n    });\n  }\n\n  private async handleMessage(\n    request: any, \n    sender: chrome.runtime.MessageSender, \n    sendResponse: (response?: any) => void\n  ): Promise<void> {\n    try {\n      switch (request.action) {\n        case 'extractContent':\n          if (sender.tab?.id) {\n            const data = await this.extractContentFromTab(sender.tab.id);\n            sendResponse({ success: true, data });\n          } else {\n            sendResponse({ success: false, error: 'No tab ID available' });\n          }\n          break;\n\n        case 'contentChanged':\n          this.handleContentChange(request.url, sender.tab?.id);\n          sendResponse({ success: true });\n          break;\n\n        case 'getStoredData':\n          const storedData = await this.getStoredData(request.tabId);\n          sendResponse({ success: true, data: storedData });\n          break;\n\n        case 'clearStoredData':\n          await this.clearStoredData(request.tabId);\n          sendResponse({ success: true });\n          break;\n\n        default:\n          sendResponse({ success: false, error: 'Unknown action' });\n      }\n    } catch (error) {\n      console.error('Background script error:', error);\n      sendResponse({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  }\n\n  private async extractContentFromTab(tabId: number): Promise<ExtractedData | null> {\n    try {\n      const results = await chrome.scripting.executeScript({\n        target: { tabId },\n        func: () => {\n          // This function runs in the page context\n          const extractor = (window as any).contentExtractor;\n          if (extractor && typeof extractor.extractPageContent === 'function') {\n            return extractor.extractPageContent();\n          }\n          \n          // Fallback extraction if content script not available\n          return {\n            url: window.location.href,\n            title: document.title,\n            headings: [],\n            petRelatedContent: [],\n            metadata: {},\n            extractedAt: new Date().toISOString()\n          };\n        }\n      });\n\n      if (results[0]?.result) {\n        const data = results[0].result as ExtractedData;\n        await this.storeExtractedData(tabId, data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Failed to extract content:', error);\n    }\n    \n    return null;\n  }\n\n  private async storeExtractedData(tabId: number, data: ExtractedData): Promise<void> {\n    const key = `extracted_data_${tabId}`;\n    await chrome.storage.local.set({ [key]: data });\n    \n    // Also store in session for quick access\n    await chrome.storage.session.set({ \n      lastExtraction: data,\n      lastExtractionTabId: tabId \n    });\n  }\n\n  private async getStoredData(tabId: number): Promise<ExtractedData | null> {\n    const key = `extracted_data_${tabId}`;\n    const result = await chrome.storage.local.get([key]);\n    return result[key] || null;\n  }\n\n  private async clearStoredData(tabId: number): Promise<void> {\n    const key = `extracted_data_${tabId}`;\n    await chrome.storage.local.remove([key]);\n  }\n\n  private handleFirstInstall(): void {\n    // Set default settings\n    chrome.storage.sync.set({\n      autoExtract: false,\n      petKeywords: [\n        'dog', 'cat', 'pet', 'animal', 'veterinary', 'vet'\n      ],\n      minContentLength: 30,\n      maxResults: 15\n    });\n\n    // Open welcome page\n    chrome.tabs.create({\n      url: chrome.runtime.getURL('welcome.html')\n    });\n  }\n\n  private handleExtensionUpdate(previousVersion?: string): void {\n    console.log(`SOULVET Extension updated from ${previousVersion} to ${chrome.runtime.getManifest().version}`);\n    \n    // Handle migration if needed\n    if (previousVersion && this.needsMigration(previousVersion)) {\n      this.migrateData(previousVersion);\n    }\n  }\n\n  private needsMigration(previousVersion: string): boolean {\n    // Add version comparison logic here\n    return false;\n  }\n\n  private async migrateData(previousVersion: string): Promise<void> {\n    // Add data migration logic here\n    console.log('Migrating data from version:', previousVersion);\n  }\n\n  private handleTabComplete(tabId: number, tab: chrome.tabs.Tab): void {\n    // Check if this is a pet-related website\n    if (tab.url && this.isPetRelatedUrl(tab.url)) {\n      // Optionally auto-extract content for pet-related sites\n      chrome.storage.sync.get(['autoExtract'], (result) => {\n        if (result.autoExtract) {\n          this.extractContentFromTab(tabId);\n        }\n      });\n    }\n  }\n\n  private isPetRelatedUrl(url: string): boolean {\n    const petDomains = [\n      'petmd.com', 'akc.org', 'aspca.org', 'petco.com', 'petsmart.com',\n      'chewy.com', 'vetstreet.com', 'petfinder.com', 'rover.com'\n    ];\n    \n    const petKeywords = [\n      'veterinary', 'animal', 'pet', 'dog', 'cat', 'puppy', 'kitten'\n    ];\n\n    return petDomains.some(domain => url.includes(domain)) ||\n           petKeywords.some(keyword => url.toLowerCase().includes(keyword));\n  }\n\n  private handleContentChange(url: string, tabId?: number): void {\n    // Handle dynamic content changes\n    if (tabId) {\n      // Debounce rapid changes\n      clearTimeout((this as any)[`contentChangeTimer_${tabId}`]);\n      (this as any)[`contentChangeTimer_${tabId}`] = setTimeout(() => {\n        console.log('Content changed on tab:', tabId);\n        // Optionally re-extract content\n      }, 2000);\n    }\n  }\n}\n\n// Initialize background service\nnew BackgroundService();\n\nexport default BackgroundService;\n"],"names":["constructor","this","setupExtensionListeners","setupContextMenus","chrome","runtime","onInstalled","addListener","details","reason","handleFirstInstall","handleExtensionUpdate","previousVersion","onMessage","request","sender","sendResponse","handleMessage","tabs","onUpdated","tabId","changeInfo","tab","status","url","handleTabComplete","contextMenus","create","id","title","contexts","onClicked","info","menuItemId","extractContentFromTab","action","success","data","error","handleContentChange","getStoredData","clearStoredData","console","Error","message","results","scripting","executeScript","target","func","extractor","window","contentExtractor","extractPageContent","location","href","document","headings","petRelatedContent","metadata","extractedAt","Date","toISOString","result","storeExtractedData","key","storage","local","set","session","lastExtraction","lastExtractionTabId","get","remove","sync","autoExtract","petKeywords","minContentLength","maxResults","getURL","log","getManifest","version","needsMigration","migrateData","isPetRelatedUrl","some","domain","includes","keyword","toLowerCase","clearTimeout","setTimeout"],"sourceRoot":""}